import re
import uuid


class multiRegex:
    def __init__(self, rules):
        self.rules = dict(zip(self._gen_group_names(), rules))
        merge = (f'(?P<{name}>{regex})' for name, (regex) in self.rules.items())
        self.pattern = re.compile('|'.join(merge))

    @staticmethod
    def _gen_group_names():    
        while True:
            yield f'g{uuid.uuid4()}'.replace('-', '')

    def search(self, targetModel):
        result = self.pattern.search(targetModel)
        if result is not None:
            for group, match in result.groupdict().items():
                if match:
                    text = self.rules[group]
                    return match, text


rules = [("^Microsoft (Surface [^-]+(?=-[^-]))"),
         ("^Microsoft (Surface.* (\d{1}))")]

targetModel = ["MICROSOFT SURFACE 2 - 12.3"" - CORE I5 1135G7 - 8 GB RAM".title()]
multi = multiRegex(rules) 

for match in targetModel:
    match, text = multi.search(match)
    print(match)
    