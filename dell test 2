import re

class baseModel_Rules:
    def __init__(self, modelPatterns, endingPatterns):

        self.modelPatterns = dict(zip(modelPatterns, endingPatterns))
        self.endingPatterns = dict(zip(modelPatterns, endingPatterns))

        baseMerge = (f'{regex})' for regex in self.modelPatterns.items())
        endingMerge = (f'{regex})' for regex in self.endingPatterns.items())

        self.modelPattern = re.compile('|'.join(baseMerge))
        self.endingpattern = re.compile('|'.join(endingMerge))

    def search(self, targetModel):
        result = self.modelPattern.search(targetModel)
        if result is not None:
            for group, match in result.groupdict().items():
                if match:
                    text = self.modelPatterns[group]
                    return match, text

        #changed target model to be the match of previous search

                result = self.modelPattern.search(targetModel)
                if result is not None:
                    for group, match in result.groupdict().items():
                        if match:
                            text = self.modelPatterns[group]
                            return match, text

modelPatterns = [("((Latitude|Optiplex|Precision) (\d{4}))"),
         ("((Precision).*(\d{4}))"),
         ("^Dell.*Enterprise$"),
         ("XPS \d{2} \d{4}")]

endingPatterns = [("7210$", "2-in-1"),
         ("7320$", "Detachable"),
         ("3280$", "AIO"),
         ("7090$", "Ultra"),
         ("3420$", "Compact")
         ]

targetModel = ["DELL PRECISION 7320 - 12.3"" - CORE I5 1135G7 - 8 GB RAM".title()]
model = baseModel_Rules(modelPatterns) 
modelEndings = baseModel_Rules(endingPatterns) 

for match in targetModel:
    match, text = model.search(match)
    
baseModel = match

#changed for match to if match 

if match in baseModel:
    if modelEndings.search(match) is not None:
            match, text = modelEndings.search(match)
            ending = text
            print(f'{baseModel}' + ' ' + f'{ending}')
    else:
        print(f'{baseModel}')